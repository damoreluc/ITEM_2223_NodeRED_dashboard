[
    {
        "id": "ce7acae890c807bf",
        "type": "tab",
        "label": "My first flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e80dc1816e42972c",
        "type": "tab",
        "label": "MQTT messages",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "41c275d.65e1c8c",
        "type": "tab",
        "label": "Flow 1",
        "disabled": true,
        "info": ""
    },
    {
        "id": "ce09026f.e98f",
        "type": "tab",
        "label": "Split pacchetto",
        "disabled": true,
        "info": ""
    },
    {
        "id": "c47a0e17.12827",
        "type": "tab",
        "label": "BME280",
        "disabled": true,
        "info": ""
    },
    {
        "id": "1471bcf322cb6423",
        "type": "tab",
        "label": "MultiPacket_scope_FFT",
        "disabled": false,
        "info": "Assembla 4 payload consecutivi per ottenere un unico pacchetto.\n\nDa usare con ESP32 programmata col sorgente:\n\nESP32 DevKit Async MQTT big packet Planet02\n\n(Test ESP32-WROOM-32 DevKit Async MQTT client v2.0 with big packet)\n\nRef:\nhttps://www.html5rocks.com/en/tutorials/webgl/typed_arrays/\nhttps://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer\nhttps://www.w3schools.com/ai/ai_chartjs.asp\n\n// aggiornamento dataset del grafico:\nhttps://www.chartjs.org/docs/latest/developers/updates.html"
    },
    {
        "id": "4dc852e22b7643b0",
        "type": "tab",
        "label": "Flow 6",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "23336cebd3587c7f",
        "type": "tab",
        "label": "Flow 7",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6c259dd5.72f0d4",
        "type": "subflow",
        "name": "Ring Buffer",
        "info": "# Ring buffer\n## Last in First Out subflow\nThis flow receives a series of msg.payloads and builds a ring bifferwith a specific buffer size. The buffer size is configurabe through subflows enviroment variables.\n\n### Input\nThe `msg.payload`will be added to the ring buffer array, except if `msg.topic == list`\n\nIf `msg.topic == list` the complete buffer will be sent at the secont output.\n\n\n### Output 1\nAlways sends the original message\n\n### Output 2\nAlways return the complete buffer.\n\n### Status\nAlways shows the queue size.\n\n### Enviroment Variables\n`Buffer_Size` defines the size of the queue. If a new item arrives and the queue is full, the oldest item will be removed.",
        "category": "",
        "in": [
            {
                "x": 180,
                "y": 100,
                "wires": [
                    {
                        "id": "b4286eb1.847af"
                    },
                    {
                        "id": "36df5ea7.231082"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 280,
                "y": 40,
                "wires": [
                    {
                        "id": "6c259dd5.72f0d4",
                        "port": 0
                    }
                ]
            },
            {
                "x": 800,
                "y": 140,
                "wires": [
                    {
                        "id": "afc05e2d.59f36",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Buffer_Size",
                "type": "num",
                "value": "128",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "Buffer_Reset",
                "type": "bool",
                "value": "false"
            }
        ],
        "color": "#DDAA99",
        "inputLabels": [
            "payload"
        ],
        "outputLabels": [
            "Original message",
            "Buffer"
        ],
        "icon": "font-awesome/fa-circle-o-notch",
        "status": {
            "x": 1020,
            "y": 100,
            "wires": [
                {
                    "id": "36df5ea7.231082",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "d3ab5b4c.55d338",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "63897fa5.43c4",
        "type": "ui_group",
        "name": "Uno",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "26077238.d6034e",
        "type": "mqtt-broker",
        "name": "Raspberry Pi4",
        "broker": "192.168.0.46",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "b9eb0937.738868",
        "type": "ui_group",
        "name": "Due",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a54f994b.fa7e08",
        "type": "ui_group",
        "name": "Time stamp",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "16",
        "collapse": false
    },
    {
        "id": "35679e61.aa8e72",
        "type": "ui_group",
        "name": "Temperature",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "16",
        "collapse": false
    },
    {
        "id": "1908f510.6d260b",
        "type": "ui_group",
        "name": "A3_A4",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": "16",
        "collapse": false
    },
    {
        "id": "cfc49afe.f8d588",
        "type": "ui_group",
        "name": "A5_A6",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": "16",
        "collapse": false
    },
    {
        "id": "d220cbeb.3f2478",
        "type": "mqtt-broker",
        "name": "Mosquitto",
        "broker": "test.mosquitto.org",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "7f0dc9b.56d0038",
        "type": "mqtt-broker",
        "name": "SHIFTR.IO",
        "broker": "item2122a.cloud.shiftr.io",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "5281f4aa.e927ac",
        "type": "mqtt-broker",
        "name": "Udoo",
        "broker": "192.168.0.48",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "26a30331.bcf2dc",
        "type": "mqtt-broker",
        "name": "ESP32_FFT",
        "broker": "192.168.0.64",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "21fb4565.85565a",
        "type": "ui_group",
        "name": "demo 1",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ed68b86d.026b2",
        "type": "ui_group",
        "name": "demo 3",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "a1a4b9da.737a38",
        "type": "ui_group",
        "name": "demo 2",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "2bf41b72.1ddbf4",
        "type": "ui_group",
        "name": "Segnale",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false
    },
    {
        "id": "ed4f6f2d.cb71d",
        "type": "ui_group",
        "name": "Led PWM",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1b44d85b.ff3588",
        "type": "mqtt-broker",
        "name": "Raspberry Pi4",
        "broker": "192.168.0.46",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "b03b962e.7c4d18",
        "type": "ui_group",
        "name": "Dati",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "16",
        "collapse": false
    },
    {
        "id": "e17896f2.80a5d",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "fd385d7b.f6eb",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "a99a72c8.822928",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "6fc54d4d.ec2284",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "2b3220bb.4ab43",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "69ef70e4.065f2",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 9,
        "width": 2,
        "height": 1
    },
    {
        "id": "a4ba43a8.5863e8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "ca168191.d5201",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "ba799040.74269",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 15,
        "width": 2,
        "height": 1
    },
    {
        "id": "9a700e17.07f14",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 17,
        "width": 2,
        "height": 1
    },
    {
        "id": "35a4e7d1.620608",
        "type": "mqtt-broker",
        "name": "Shiftr",
        "broker": "item2122a.cloud.shiftr.io",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a44738b2662f42c6",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "85f22695862cd41e",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "969ebaf977a2287b",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "4266b148b3c19218",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 9,
        "width": 2,
        "height": 1
    },
    {
        "id": "79f08c1b172df01e",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "cfcff6a74151fea0",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 12,
        "width": 10,
        "height": 1
    },
    {
        "id": "3cce898b5161dcf7",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "a6851369ae22d014",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "16bc25db873124e1",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "262f7f788d5d4a2f",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "1d614804986e2038",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "3bb368b604a3d1ac",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "b03b962e.7c4d18",
        "order": 24,
        "width": 1,
        "height": 1
    },
    {
        "id": "5f88817443cb3d4b",
        "type": "ui_group",
        "name": "Dati",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "67fc408ff878f115",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "5f88817443cb3d4b",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "c4c3adb2e9ed6c74",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "5f88817443cb3d4b",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "e72665a83258061f",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "5f88817443cb3d4b",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "a834e40fb32b62e7",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "5f88817443cb3d4b",
        "order": 9,
        "width": 2,
        "height": 1
    },
    {
        "id": "4a335ee41d76d48e",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "5f88817443cb3d4b",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "808222c98d761212",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "5f88817443cb3d4b",
        "order": 12,
        "width": 10,
        "height": 1
    },
    {
        "id": "8dea25cf2301c6a9",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "5f88817443cb3d4b",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "5145d99ca774736f",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "5f88817443cb3d4b",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "3386140272dba19a",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "5f88817443cb3d4b",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "cd68a9c4fc2c3b19",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "5f88817443cb3d4b",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "97a242b138f3bfa8",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "5f88817443cb3d4b",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "d85b0824a29ad4cb",
        "type": "ui_spacer",
        "z": "1471bcf322cb6423",
        "name": "spacer",
        "group": "5f88817443cb3d4b",
        "order": 24,
        "width": 1,
        "height": 1
    },
    {
        "id": "d54c2fbb720e92b9",
        "type": "ui_spacer",
        "z": "4dc852e22b7643b0",
        "name": "spacer",
        "group": "63897fa5.43c4",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "9fd1de41ac241935",
        "type": "ui_spacer",
        "z": "4dc852e22b7643b0",
        "name": "spacer",
        "group": "63897fa5.43c4",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "b4286eb1.847af",
        "type": "switch",
        "z": "6c259dd5.72f0d4",
        "name": "Topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "list",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 100,
        "wires": [
            [
                "6c6b3594.fac22c"
            ],
            [
                "afc05e2d.59f36"
            ]
        ]
    },
    {
        "id": "afc05e2d.59f36",
        "type": "function",
        "z": "6c259dd5.72f0d4",
        "name": "put",
        "func": "var queue = flow.get(\"queue\");\n//var queue = context.get(\"queue\");\n\nvar bufferSize = parseInt(env.get(\"Buffer_Size\"));\n\nif (!Array.isArray(queue)){\n    queue = [];\n//}else if ( queue.length >= env.get(\"Buffer_Size\") ){\n}else if ( queue.length >= bufferSize ){    \n//    queue.pop(1);\n    queue = [];\n}\n\nif(msg.topic==\"ResetQueue\") {\n    queue = [];\n    flow.set(\"queue\", queue);\n    //context.set(\"queue\", queue);    \n} \nelse {\n//queue.unshift(msg.payload);\nqueue.push(msg.payload);\n\nflow.set(\"queue\", queue);\n//context.set(\"queue\", queue);\n\n//msg.payload = queue;\n\n//if ( queue.length == env.get(\"Buffer_Size\") ){\nif ( queue.length == bufferSize ){\n  msg.payload = queue;\n  queue = [];\n} else {\n    msg.payload=null;\n}\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 140,
        "wires": [
            [
                "6c6b3594.fac22c"
            ]
        ]
    },
    {
        "id": "6c6b3594.fac22c",
        "type": "change",
        "z": "6c259dd5.72f0d4",
        "name": "list",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queue",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "36df5ea7.231082",
        "type": "change",
        "z": "6c259dd5.72f0d4",
        "name": "Count",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$count(msg.payload)\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "c8df5d53a91c28f6",
        "type": "inject",
        "z": "ce7acae890c807bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 160,
        "wires": [
            [
                "110b7950e5c6767a"
            ]
        ]
    },
    {
        "id": "3c414338e3dc134a",
        "type": "debug",
        "z": "ce7acae890c807bf",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 160,
        "wires": []
    },
    {
        "id": "110b7950e5c6767a",
        "type": "function",
        "z": "ce7acae890c807bf",
        "name": "date formatterer",
        "func": "// Create a Date object from the payload\nvar date = new Date(msg.payload);\n// Change the payload to be a formatted Date string\nmsg.payload = date.toString();\n// Return the message so it can be sent on\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "3c414338e3dc134a"
            ]
        ]
    },
    {
        "id": "8a37312b93481a4f",
        "type": "inject",
        "z": "e80dc1816e42972c",
        "name": "temperature",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "livingroom/temperature",
        "payload": "22.5",
        "payloadType": "num",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "293523a87aa34a42"
            ]
        ]
    },
    {
        "id": "293523a87aa34a42",
        "type": "mqtt out",
        "z": "e80dc1816e42972c",
        "name": "Mosquitto broker",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d220cbeb.3f2478",
        "x": 430,
        "y": 140,
        "wires": []
    },
    {
        "id": "c078e07c398a50c3",
        "type": "mqtt in",
        "z": "e80dc1816e42972c",
        "name": "Mosquitto broker",
        "topic": "livingroom/+",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "d220cbeb.3f2478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 380,
        "wires": [
            [
                "7156ee50fd66d093"
            ]
        ]
    },
    {
        "id": "a71e15588da4abcd",
        "type": "debug",
        "z": "e80dc1816e42972c",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 340,
        "wires": []
    },
    {
        "id": "fd6d47e537c9f8a6",
        "type": "inject",
        "z": "e80dc1816e42972c",
        "name": "humidity",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "livingroom/humidity",
        "payload": "55",
        "payloadType": "num",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "293523a87aa34a42"
            ]
        ]
    },
    {
        "id": "57c818c2e2d1fdd8",
        "type": "inject",
        "z": "e80dc1816e42972c",
        "name": "lighting",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "livingroom/lighting",
        "payload": "Off",
        "payloadType": "str",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "293523a87aa34a42"
            ]
        ]
    },
    {
        "id": "7156ee50fd66d093",
        "type": "switch",
        "z": "e80dc1816e42972c",
        "name": "demux",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "livingroom/temperature",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "livingroom/humidity",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "livingroom/lighting",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 350,
        "y": 380,
        "wires": [
            [
                "a71e15588da4abcd"
            ],
            [
                "d3649385604e90e9"
            ],
            [
                "813a59b7d0e3ef8e"
            ]
        ]
    },
    {
        "id": "d3649385604e90e9",
        "type": "debug",
        "z": "e80dc1816e42972c",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 380,
        "wires": []
    },
    {
        "id": "813a59b7d0e3ef8e",
        "type": "debug",
        "z": "e80dc1816e42972c",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 420,
        "wires": []
    },
    {
        "id": "d2913b58.341888",
        "type": "inject",
        "z": "41c275d.65e1c8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "6a379584.e6e30c"
            ]
        ]
    },
    {
        "id": "6a379584.e6e30c",
        "type": "debug",
        "z": "41c275d.65e1c8c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 140,
        "wires": []
    },
    {
        "id": "a5c4e1b8.57914",
        "type": "ui_slider",
        "z": "41c275d.65e1c8c",
        "name": "Potenziometro",
        "label": "Potenziometro",
        "tooltip": "",
        "group": "63897fa5.43c4",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 150,
        "y": 280,
        "wires": [
            [
                "690f82ae.a560dc"
            ]
        ]
    },
    {
        "id": "690f82ae.a560dc",
        "type": "ui_gauge",
        "z": "41c275d.65e1c8c",
        "name": "Multimetro",
        "group": "63897fa5.43c4",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Multimetro",
        "label": "Volt",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 450,
        "y": 280,
        "wires": []
    },
    {
        "id": "f8618435.59e518",
        "type": "mqtt out",
        "z": "41c275d.65e1c8c",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "26077238.d6034e",
        "x": 300,
        "y": 440,
        "wires": []
    },
    {
        "id": "e311195e.2b20b8",
        "type": "mqtt in",
        "z": "41c275d.65e1c8c",
        "name": "",
        "topic": "slider",
        "qos": "2",
        "datatype": "auto",
        "broker": "26077238.d6034e",
        "inputs": 0,
        "x": 510,
        "y": 440,
        "wires": [
            [
                "f32785d.d12c178"
            ]
        ]
    },
    {
        "id": "a7fdeec.e6b9a1",
        "type": "ui_slider",
        "z": "41c275d.65e1c8c",
        "name": "",
        "label": "slider MQTT",
        "tooltip": "",
        "group": "63897fa5.43c4",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "slider",
        "topicType": "str",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 130,
        "y": 340,
        "wires": [
            [
                "f8618435.59e518"
            ]
        ]
    },
    {
        "id": "f32785d.d12c178",
        "type": "ui_gauge",
        "z": "41c275d.65e1c8c",
        "name": "",
        "group": "63897fa5.43c4",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "gauge MQTT",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 680,
        "y": 440,
        "wires": []
    },
    {
        "id": "bf43ab61.c0c658",
        "type": "debug",
        "z": "41c275d.65e1c8c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 500,
        "wires": []
    },
    {
        "id": "506675a8.b0efac",
        "type": "ui_led",
        "z": "41c275d.65e1c8c",
        "order": 1,
        "group": "b9eb0937.738868",
        "width": 0,
        "height": 0,
        "label": "Off/On",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "str"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "OnOff",
        "x": 710,
        "y": 540,
        "wires": []
    },
    {
        "id": "6c630306.e5fe4c",
        "type": "mqtt in",
        "z": "41c275d.65e1c8c",
        "name": "",
        "topic": "SwitchOnOff",
        "qos": "0",
        "datatype": "auto",
        "broker": "26077238.d6034e",
        "inputs": 0,
        "x": 540,
        "y": 540,
        "wires": [
            [
                "506675a8.b0efac",
                "bf43ab61.c0c658"
            ]
        ]
    },
    {
        "id": "ce4bc177.97c",
        "type": "ui_switch",
        "z": "41c275d.65e1c8c",
        "name": "",
        "label": "Off/On",
        "tooltip": "",
        "group": "b9eb0937.738868",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "SwitchOnOff",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 140,
        "y": 540,
        "wires": [
            [
                "f8618435.59e518"
            ]
        ]
    },
    {
        "id": "ba7cd94c.efc0f8",
        "type": "function",
        "z": "ce09026f.e98f",
        "name": "split pacchetto",
        "func": "var s = msg.payload;\n\n// stringa di prova\n//var s=\"@;0001051048;00869;00426;02420;00472;00000;01234\";\n// array con le parti di s\nvar o = s.split(\";\");\n// array di uscita\nvar a=[];\n\n// nomi dei topics\n//          o = [@, 0001208869, 00000, 00000, 00573,... ];\nvar topicName = [\"header\",\"timestamp\",\"A1\",\"A2\",\"A3\",\"A4\",\"A5\",\"A6\"];\n\n// ciclo di creazione delle uscite\nvar i;\nfor(i=1; i < topicName.length; i++) {\n    t = topicName[i];\n    //v = values[i];\n    v=parseInt(o[i]);\n    a.push({\"topic\":t,\"payload\":v});\n    //node.warn({\"topic\":t,\"payload\":v});\n}\n//node.warn(a);\nreturn a;",
        "outputs": 7,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 300,
        "y": 160,
        "wires": [
            [
                "501dbe1f.92a7",
                "86edcd92.88cb8"
            ],
            [
                "c19a8d22.b128c"
            ],
            [
                "c3669804.c0b7e8"
            ],
            [
                "79af1cf8.a5bc04"
            ],
            [
                "ed5421c9.f9c8a"
            ],
            [
                "53edc71f.ac6d98"
            ],
            [
                "d760c67e.4120c8"
            ]
        ]
    },
    {
        "id": "6d25680b.8577e8",
        "type": "inject",
        "z": "ce09026f.e98f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "remote/",
        "payload": "@;0001051053;00869;00426;02420;00472;00000;01234",
        "payloadType": "str",
        "x": 110,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "32499bca.ee38d4",
        "type": "comment",
        "z": "ce09026f.e98f",
        "name": "split ed array con for",
        "info": "",
        "x": 290,
        "y": 80,
        "wires": []
    },
    {
        "id": "501dbe1f.92a7",
        "type": "ui_text",
        "z": "ce09026f.e98f",
        "group": "a54f994b.fa7e08",
        "order": 0,
        "width": "2",
        "height": "1",
        "name": "",
        "label": "Time stamp",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 790,
        "y": 80,
        "wires": []
    },
    {
        "id": "be7ac6.d41dd538",
        "type": "ui_gauge",
        "z": "ce09026f.e98f",
        "name": "",
        "group": "35679e61.aa8e72",
        "order": 1,
        "width": "4",
        "height": "3",
        "gtype": "gage",
        "title": "A1",
        "label": "[Â°C]",
        "format": "{{value | number:2}}",
        "min": 0,
        "max": "150",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 770,
        "y": 140,
        "wires": []
    },
    {
        "id": "c19a8d22.b128c",
        "type": "function",
        "z": "ce09026f.e98f",
        "name": "TMP36",
        "func": "// parametri TMP36\nvar Vofs = 0.5;  // volt\nvar k = 0.01;    // 10mV / Â°C\nvar Vref = 3.3;  // volt\n\nvar n = msg.payload;\n// ricavo tensione\nvar v = n * Vref / 4096.0;\n// ricavo temperatura\nmsg.payload = (v-Vofs)/k;\nmsg.topic = \"Temperatura 1\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 140,
        "wires": [
            [
                "be7ac6.d41dd538",
                "86edcd92.88cb8",
                "c9339f80.5587e"
            ]
        ],
        "info": "# TMP36\nconversione da intero (fondo scala 4095) a Â°C nell'intervallo 0Â°C .. 150Â°C"
    },
    {
        "id": "c3669804.c0b7e8",
        "type": "function",
        "z": "ce09026f.e98f",
        "name": "TMP36",
        "func": "// parametri TMP36\nvar Vofs = 0.5;  // volt\nvar k = 0.01;    // 10mV / Â°C\nvar Vref = 3.3;  // volt\n\nvar n = msg.payload;\n// ricavo tensione\nvar v = n * Vref / 4096.0;\n// ricavo temperatura\nmsg.payload = (v-Vofs)/k;\nmsg.topic = \"Temperatura 2\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 180,
        "wires": [
            [
                "c6c63388.ad899",
                "86edcd92.88cb8",
                "c9339f80.5587e"
            ]
        ],
        "info": "# TMP36\nconversione da intero (fondo scala 4095) a Â°C nell'intervallo 0Â°C .. 150Â°C"
    },
    {
        "id": "c6c63388.ad899",
        "type": "ui_gauge",
        "z": "ce09026f.e98f",
        "name": "",
        "group": "35679e61.aa8e72",
        "order": 2,
        "width": "4",
        "height": "3",
        "gtype": "gage",
        "title": "A2",
        "label": "[Â°C]",
        "format": "{{value | number:2}}",
        "min": 0,
        "max": "150",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 770,
        "y": 180,
        "wires": []
    },
    {
        "id": "79af1cf8.a5bc04",
        "type": "function",
        "z": "ce09026f.e98f",
        "name": "ADXL335_X",
        "func": "// parametri ADXL335 asse X\nvar Vofsx = 1.638;   // volt\nvar kx = 0.33;      // typ. 300mV / g\nvar Vref = 3.3;     // volt\n\nvar n = msg.payload;\n// ricavo tensione\nvar v = n * Vref / 4096.0;\n// ricavo l'accelerazione \nmsg.payload = (v-Vofsx)/kx;\nmsg.topic = \"Asse x\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 220,
        "wires": [
            [
                "7008b79f.5385c8",
                "86edcd92.88cb8",
                "88ba9951.2045a8"
            ]
        ],
        "info": "# TMP36\nconversione da intero (fondo scala 4095) a Â°C nell'intervallo 0Â°C .. 150Â°C"
    },
    {
        "id": "7008b79f.5385c8",
        "type": "ui_gauge",
        "z": "ce09026f.e98f",
        "name": "",
        "group": "1908f510.6d260b",
        "order": 1,
        "width": "4",
        "height": "3",
        "gtype": "gage",
        "title": "A3",
        "label": "[g]",
        "format": "{{value | number:2}}",
        "min": "-3.0",
        "max": "+3.0",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 770,
        "y": 220,
        "wires": []
    },
    {
        "id": "ed5421c9.f9c8a",
        "type": "function",
        "z": "ce09026f.e98f",
        "name": "ADXL335_Y",
        "func": "// parametri ADXL335 asse Y\nvar Vofsy = 1.65;   // volt\nvar ky = 0.33;       // typ. 300mV / g\nvar Vref = 3.3;     // volt\n\nvar n = msg.payload;\n// ricavo tensione\nvar v = n * Vref / 4096.0;\n// ricavo l'accelerazione \nmsg.payload = (v-Vofsy)/ky;\nmsg.topic = \"Asse y\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 260,
        "wires": [
            [
                "3139a559.99c18a",
                "86edcd92.88cb8"
            ]
        ],
        "info": "# TMP36\nconversione da intero (fondo scala 4095) a Â°C nell'intervallo 0Â°C .. 150Â°C"
    },
    {
        "id": "3139a559.99c18a",
        "type": "ui_gauge",
        "z": "ce09026f.e98f",
        "name": "",
        "group": "1908f510.6d260b",
        "order": 2,
        "width": "4",
        "height": "3",
        "gtype": "gage",
        "title": "A4",
        "label": "[g]",
        "format": "{{value | number:2}}",
        "min": "-3.0",
        "max": "+3.0",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 770,
        "y": 260,
        "wires": []
    },
    {
        "id": "53edc71f.ac6d98",
        "type": "function",
        "z": "ce09026f.e98f",
        "name": "ADXL335_Z",
        "func": "// parametri ADXL335 asse Z\nvar Vofsz = 1.6495;   // volt\nvar kz = 0.33;       // typ. 300mV / g\nvar Vref = 3.3;     // volt\n\nvar n = msg.payload;\n// ricavo tensione\nvar v = n * Vref / 4096.0;\n// ricavo l'accelerazione \nmsg.payload = (v-Vofsz)/kz;\nmsg.topic = \"Asse z\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 300,
        "wires": [
            [
                "bb8135b2.ef4bd8",
                "86edcd92.88cb8"
            ]
        ],
        "info": "# TMP36\nconversione da intero (fondo scala 4095) a Â°C nell'intervallo 0Â°C .. 150Â°C"
    },
    {
        "id": "bb8135b2.ef4bd8",
        "type": "ui_gauge",
        "z": "ce09026f.e98f",
        "name": "",
        "group": "cfc49afe.f8d588",
        "order": 1,
        "width": "4",
        "height": "3",
        "gtype": "gage",
        "title": "A5",
        "label": "[g]",
        "format": "{{value | number:2}}",
        "min": "-3.0",
        "max": "+3.0",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 770,
        "y": 300,
        "wires": []
    },
    {
        "id": "d760c67e.4120c8",
        "type": "function",
        "z": "ce09026f.e98f",
        "name": "Coppia",
        "func": "// parametri trasduttore coppia\nvar Vofs = 1.65;   // volt\nvar k = 10/1.65;   // -10/+10\nvar Vref = 3.3;    // volt\n\nvar n = msg.payload;\n// ricavo tensione\nvar v = n * Vref / 4096.0;\n// ricavo l'accelerazione \nmsg.payload = (v-Vofs)*k;\nmsg.topic = \"Coppia\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 340,
        "wires": [
            [
                "de82d964.e7b6f8",
                "86edcd92.88cb8"
            ]
        ],
        "info": "# TMP36\nconversione da intero (fondo scala 4095) a Â°C nell'intervallo 0Â°C .. 150Â°C"
    },
    {
        "id": "de82d964.e7b6f8",
        "type": "ui_gauge",
        "z": "ce09026f.e98f",
        "name": "",
        "group": "cfc49afe.f8d588",
        "order": 2,
        "width": "4",
        "height": "3",
        "gtype": "gage",
        "title": "A6",
        "label": "[V]",
        "format": "{{value | number:2}}",
        "min": "-10",
        "max": "+10",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 770,
        "y": 340,
        "wires": []
    },
    {
        "id": "ecc46bca.601bb8",
        "type": "ui_chart",
        "z": "ce09026f.e98f",
        "name": "",
        "group": "35679e61.aa8e72",
        "order": 4,
        "width": "8",
        "height": "6",
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "40",
        "removeOlder": "10",
        "removeOlderPoints": "100",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1130,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "f5eea78f.5a29c8",
        "type": "ui_chart",
        "z": "ce09026f.e98f",
        "name": "",
        "group": "1908f510.6d260b",
        "order": 3,
        "width": "8",
        "height": "6",
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-4",
        "ymax": "+4",
        "removeOlder": "10",
        "removeOlderPoints": "100",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1170,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "a0781373.052f2",
        "type": "ui_chart",
        "z": "ce09026f.e98f",
        "name": "",
        "group": "cfc49afe.f8d588",
        "order": 3,
        "width": "8",
        "height": "6",
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-10",
        "ymax": "10",
        "removeOlder": "2",
        "removeOlderPoints": "100",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 970,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "6a764480.573e7c",
        "type": "mqtt in",
        "z": "ce09026f.e98f",
        "name": "",
        "topic": "ESP32DevKit123/outTopic10",
        "qos": "2",
        "datatype": "auto",
        "broker": "d220cbeb.3f2478",
        "inputs": 0,
        "x": 170,
        "y": 520,
        "wires": [
            [
                "cb23da81.886f48"
            ]
        ]
    },
    {
        "id": "66f0f75a.969998",
        "type": "ui_switch",
        "z": "ce09026f.e98f",
        "name": "",
        "label": "Led",
        "tooltip": "",
        "group": "a54f994b.fa7e08",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 90,
        "y": 580,
        "wires": [
            [
                "c81fab89.6a1e38"
            ]
        ]
    },
    {
        "id": "c81fab89.6a1e38",
        "type": "mqtt out",
        "z": "ce09026f.e98f",
        "name": "Led",
        "topic": "ESP32DevKit123/ledTopic",
        "qos": "2",
        "retain": "",
        "broker": "d220cbeb.3f2478",
        "x": 280,
        "y": 580,
        "wires": []
    },
    {
        "id": "f603b10d.27b7b",
        "type": "debug",
        "z": "ce09026f.e98f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 840,
        "wires": []
    },
    {
        "id": "86edcd92.88cb8",
        "type": "join",
        "z": "ce09026f.e98f",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 790,
        "y": 460,
        "wires": [
            [
                "10595e71.7a83c2"
            ]
        ]
    },
    {
        "id": "225b4943.0d7cd6",
        "type": "function",
        "z": "ce09026f.e98f",
        "name": "Filename generator",
        "func": "// path to log files\nvar logPath = \"/home/dietpi/datalog/\";\n\n// get current time and date and convert it to text\nvar now = new Date();\nvar yyyy = now.getFullYear();\nvar mm = (now.getMonth() < 9) ? \"0\" + (now.getMonth() +1) : (now.getMonth() +1);  // getMonth is zero-based\nvar dd = (now.getDate() < 10) ? \"0\" + now.getDate() : now.getDate();\nvar hh = (now.getHours() < 10) ? \"0\" + now.getHours() : now.getHours();\nvar mmm = (now.getMinutes() < 10) ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss = (now.getSeconds() < 10) ? \"0\" + now.getSeconds() : now.getSeconds();\n\n// generate out file name pattern\nmsg.fname = \"planet_\" + yyyy + mm + dd + \".csv\";\n// full filename with the path for the file node\nmsg.filename = logPath + msg.fname;\n\n// save the current payload into a different place on the msg object\nmsg.filecontent = msg.payload;\n\n// pass the file name as search pattern to fs node to tell us if the file exists or not\nmsg.payload = {\"start\": logPath, \"pattern\": msg.fname};\n\nnode.status({fill: \"blue\", shape: \"ring\", text: msg.filename});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 680,
        "wires": [
            [
                "1143d163.fef4df"
            ]
        ]
    },
    {
        "id": "1143d163.fef4df",
        "type": "fs-file-lister",
        "z": "ce09026f.e98f",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 840,
        "y": 760,
        "wires": [
            [
                "28907a53.6b5d46"
            ]
        ]
    },
    {
        "id": "28907a53.6b5d46",
        "type": "switch",
        "z": "ce09026f.e98f",
        "name": "",
        "property": "payload",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 760,
        "wires": [
            [
                "78f20914.71d2e8"
            ],
            [
                "f3847eaa.61b65"
            ]
        ]
    },
    {
        "id": "78f20914.71d2e8",
        "type": "change",
        "z": "ce09026f.e98f",
        "name": "Get file content",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "filecontent",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 740,
        "wires": [
            [
                "c4d4a34b.ef4aa"
            ]
        ]
    },
    {
        "id": "f3847eaa.61b65",
        "type": "change",
        "z": "ce09026f.e98f",
        "name": "Get file content",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "filecontent",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 780,
        "wires": [
            [
                "a3698f8a.5cd96"
            ]
        ]
    },
    {
        "id": "c4d4a34b.ef4aa",
        "type": "csv",
        "z": "ce09026f.e98f",
        "name": "",
        "sep": "\\t",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp,temperatura_1,temperatura_2,asse_x,asse_y,asse_z,coppia",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1390,
        "y": 740,
        "wires": [
            [
                "f4be3358.e1cea"
            ]
        ]
    },
    {
        "id": "a3698f8a.5cd96",
        "type": "csv",
        "z": "ce09026f.e98f",
        "name": "",
        "sep": "\\t",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp,temperatura1,temperatura2,assex,assey,assez,coppia",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1390,
        "y": 780,
        "wires": [
            [
                "f4be3358.e1cea"
            ]
        ]
    },
    {
        "id": "f4be3358.e1cea",
        "type": "file",
        "z": "ce09026f.e98f",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1570,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "10595e71.7a83c2",
        "type": "change",
        "z": "ce09026f.e98f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "data",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 460,
        "wires": [
            [
                "31df3309.cc00cc"
            ]
        ]
    },
    {
        "id": "31df3309.cc00cc",
        "type": "function",
        "z": "ce09026f.e98f",
        "name": "Replace decimal separator",
        "func": "var i;\nfor(i=1; i < msg.payload.length; i++) {\nmsg.payload[i] = msg.payload[i].toString().replace(\".\",\",\");\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 860,
        "y": 580,
        "wires": [
            [
                "225b4943.0d7cd6"
            ]
        ]
    },
    {
        "id": "5c6e04ee.4f739c",
        "type": "ui_date_picker",
        "z": "ce09026f.e98f",
        "name": "",
        "label": "date",
        "group": "a54f994b.fa7e08",
        "order": 2,
        "width": "4",
        "height": "1",
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "x": 360,
        "y": 840,
        "wires": [
            [
                "f603b10d.27b7b"
            ]
        ]
    },
    {
        "id": "4760da7c.f23914",
        "type": "inject",
        "z": "ce09026f.e98f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 840,
        "wires": [
            [
                "5c6e04ee.4f739c"
            ]
        ]
    },
    {
        "id": "cb23da81.886f48",
        "type": "split",
        "z": "ce09026f.e98f",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "ba7cd94c.efc0f8"
            ]
        ]
    },
    {
        "id": "c9339f80.5587e",
        "type": "delay",
        "z": "ce09026f.e98f",
        "name": "",
        "pauseType": "queue",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "10",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "outputs": 1,
        "x": 970,
        "y": 120,
        "wires": [
            [
                "ecc46bca.601bb8"
            ]
        ]
    },
    {
        "id": "88ba9951.2045a8",
        "type": "batch",
        "z": "ce09026f.e98f",
        "name": "",
        "mode": "interval",
        "count": 10,
        "overlap": 0,
        "interval": "1",
        "allowEmptySequence": false,
        "topics": [],
        "x": 970,
        "y": 200,
        "wires": [
            [
                "f5eea78f.5a29c8"
            ]
        ]
    },
    {
        "id": "a5d91ef2.587fc",
        "type": "mqtt in",
        "z": "c47a0e17.12827",
        "name": "",
        "topic": "B/keep",
        "qos": "0",
        "datatype": "auto",
        "broker": "5281f4aa.e927ac",
        "inputs": 0,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "79229350.c6a29c"
            ]
        ]
    },
    {
        "id": "79229350.c6a29c",
        "type": "json",
        "z": "c47a0e17.12827",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 160,
        "wires": [
            [
                "6c0a8d2e.7cca84",
                "4d89dbb6.a61854",
                "880c3936.a311a8"
            ]
        ]
    },
    {
        "id": "9384464a.ee9f78",
        "type": "mqtt in",
        "z": "c47a0e17.12827",
        "name": "",
        "topic": "Huzzah32/BME280",
        "qos": "2",
        "datatype": "auto",
        "broker": "26077238.d6034e",
        "inputs": 0,
        "x": 130,
        "y": 260,
        "wires": [
            [
                "75bda08.4206d6"
            ]
        ]
    },
    {
        "id": "75bda08.4206d6",
        "type": "json",
        "z": "c47a0e17.12827",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 260,
        "wires": [
            [
                "698f8506.ca00ec",
                "5c5dc58f.aac23c",
                "b21d525d.cc5f5"
            ]
        ]
    },
    {
        "id": "6c0a8d2e.7cca84",
        "type": "function",
        "z": "c47a0e17.12827",
        "name": "presRef",
        "func": "var newMsg = {};\nnewMsg.topic = \"presRef\";\nnewMsg.payload = msg.payload.pres;\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 160,
        "wires": [
            [
                "a5f0dc1e.c1d42"
            ]
        ]
    },
    {
        "id": "698f8506.ca00ec",
        "type": "function",
        "z": "c47a0e17.12827",
        "name": "presBME",
        "func": "var newMsg = {};\nnewMsg.topic = \"presBME\";\nnewMsg.payload = msg.payload.pres;\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 260,
        "wires": [
            [
                "a5f0dc1e.c1d42"
            ]
        ]
    },
    {
        "id": "20eb29c3.229646",
        "type": "debug",
        "z": "c47a0e17.12827",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 220,
        "wires": []
    },
    {
        "id": "4d89dbb6.a61854",
        "type": "function",
        "z": "c47a0e17.12827",
        "name": "tempRef",
        "func": "var newMsg = {};\nnewMsg.topic = \"tempRef\";\nnewMsg.payload = msg.payload.temp;\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 340,
        "wires": [
            [
                "a5f0dc1e.c1d42"
            ]
        ]
    },
    {
        "id": "5c5dc58f.aac23c",
        "type": "function",
        "z": "c47a0e17.12827",
        "name": "tempBME",
        "func": "var newMsg = {};\nnewMsg.topic = \"tempBME\";\nnewMsg.payload = msg.payload.temp;\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 400,
        "wires": [
            [
                "a5f0dc1e.c1d42"
            ]
        ]
    },
    {
        "id": "880c3936.a311a8",
        "type": "function",
        "z": "c47a0e17.12827",
        "name": "humiRef",
        "func": "var newMsg = {};\nnewMsg.topic = \"humiRef\";\nnewMsg.payload = msg.payload.humi;\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 480,
        "wires": [
            [
                "a5f0dc1e.c1d42"
            ]
        ]
    },
    {
        "id": "b21d525d.cc5f5",
        "type": "function",
        "z": "c47a0e17.12827",
        "name": "humiBME",
        "func": "var newMsg = {};\nnewMsg.topic = \"humiBME\";\nnewMsg.payload = msg.payload.humi;\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 520,
        "wires": [
            [
                "a5f0dc1e.c1d42"
            ]
        ]
    },
    {
        "id": "6a13d471.85e88c",
        "type": "file",
        "z": "c47a0e17.12827",
        "name": "",
        "filename": "/home/dietpi/nodered_data/prova.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 780,
        "y": 740,
        "wires": [
            [
                "d8611910.2e3538"
            ]
        ]
    },
    {
        "id": "42dee562.931c0c",
        "type": "inject",
        "z": "c47a0e17.12827",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "timestamp",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 740,
        "wires": [
            [
                "6a13d471.85e88c"
            ]
        ]
    },
    {
        "id": "d8611910.2e3538",
        "type": "debug",
        "z": "c47a0e17.12827",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 740,
        "wires": []
    },
    {
        "id": "44b1a158.fdaa6",
        "type": "csv",
        "z": "c47a0e17.12827",
        "name": "",
        "sep": ";",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "presBME,presRef,tempBME,tempRef,humiBME,humiRef",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 870,
        "y": 220,
        "wires": [
            [
                "420fa175.6e4eb",
                "e3967115.cf96a"
            ]
        ]
    },
    {
        "id": "e3967115.cf96a",
        "type": "file",
        "z": "c47a0e17.12827",
        "name": "",
        "filename": "/home/dietpi/nodered_data/BMEref.csv",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1110,
        "y": 220,
        "wires": [
            [
                "20eb29c3.229646"
            ]
        ]
    },
    {
        "id": "420fa175.6e4eb",
        "type": "debug",
        "z": "c47a0e17.12827",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 60,
        "wires": []
    },
    {
        "id": "a5f0dc1e.c1d42",
        "type": "collector",
        "z": "c47a0e17.12827",
        "name": "collect_Pres",
        "onlyIfChanged": true,
        "x": 710,
        "y": 220,
        "wires": [
            [
                "44b1a158.fdaa6"
            ]
        ]
    },
    {
        "id": "366aa1f575825ad4",
        "type": "mqtt in",
        "z": "1471bcf322cb6423",
        "name": "",
        "topic": "ESP32DevKit123/FFTBinTopic1",
        "qos": "0",
        "datatype": "buffer",
        "broker": "35a4e7d1.620608",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 400,
        "wires": [
            [
                "af89c7689ee2c588"
            ]
        ]
    },
    {
        "id": "c138a4b8c8b20872",
        "type": "debug",
        "z": "1471bcf322cb6423",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 100,
        "wires": []
    },
    {
        "id": "734b297547800c70",
        "type": "file",
        "z": "1471bcf322cb6423",
        "d": true,
        "name": "",
        "filename": "C:\\Users\\luca\\Documents\\PlatformIO\\Projects\\ESP32_Devkit_ADS1256_FFT_AsyncMQTT_binary_01\\ricevuto.txt",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1230,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "af89c7689ee2c588",
        "type": "join",
        "z": "1471bcf322cb6423",
        "name": "",
        "mode": "custom",
        "build": "buffer",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 370,
        "y": 400,
        "wires": [
            [
                "5b043a62a8189c71",
                "d250054b5d0d87c6"
            ]
        ]
    },
    {
        "id": "5b043a62a8189c71",
        "type": "function",
        "z": "1471bcf322cb6423",
        "name": "ToFloatArray1",
        "func": "// https://www.html5rocks.com/en/tutorials/webgl/typed_arrays/\n// https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer/31394257#31394257\n\n// convert the NodeJS binary buffer into a Javascript ArrayBuffer\nlet b = msg.payload;\nlet myBuffer = b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength);\n\n//// convert the NodeJS binary buffer into a Javascript ArrayBuffer\n//myBuffer = msg.payload.buffer;\n\n// put a DataView over the ArrayBuffer to make it easy to access data value\nvar dv = new DataView(myBuffer);\n\n// how many elements will be converted \nlet bytes_per_element = Float32Array.BYTES_PER_ELEMENT;\nlet byte_buffer_size = myBuffer.byteLength;\nlet number_of_element = byte_buffer_size / bytes_per_element;\nlet half_number_of_element = number_of_element / 2;\n\n// create the typed array to store the converted values\nvar floatArray = new Float32Array(number_of_element);\n\n// just for debug...\n/*\nmsg.bytes_per_element = bytes_per_element;\nmsg.number_of_element = number_of_element;\nmsg.byte_length = byte_buffer_size;\n*/\n\n// iterate over the dataview and get the values\nvar j, k;\nfor (k = 0, j = 0; j < byte_buffer_size; k++, j = j + bytes_per_element) {\n  // all the values in the buffer are little-endian, set the optional littleEndian parameter to \"true\"\n  floatArray[k] = dv.getFloat32(j, true);\n}\n\n// we need to swap array halves? check if first element of the second half is lesser than 0\nif (floatArray[half_number_of_element] < 0.0) {\n  // rotate array elements by half of array size\n  // see https://stackoverflow.com/questions/1985260/rotate-the-elements-in-an-array-in-javascript/33451102#33451102\n  //floatArray.push.apply(floatArray, floatArray.splice(0, half_number_of_element));\n\n  const b2 = floatArray.slice(half_number_of_element, number_of_element);\n  b2.push.apply(b2, floatArray.slice(0, half_number_of_element));\n  // remove sign from array's first element\n  b2[0] = Math.abs(floatArray[0]);\n  // this is the new payload\n  msg.payload.ch1 = b2;\n} else {\n  // remove sign from array's first element\n  floatArray[0] = Math.abs(floatArray[0]);\n  // this is the new payload\n  msg.payload.ch1 = floatArray;\n}\n\n//floatArray = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 400,
        "wires": [
            [
                "5a163d9094f9eceb",
                "81edee3e34e23663"
            ]
        ],
        "info": "// https://www.html5rocks.com/en/tutorials/webgl/typed_arrays/"
    },
    {
        "id": "449276a4ce8cf14b",
        "type": "comment",
        "z": "1471bcf322cb6423",
        "name": "number of blocks",
        "info": "Impostare manualmente la proprietà:\nAfter a number of message parts...\n\ndividendo la dimensione del messaggio per 4096",
        "x": 360,
        "y": 440,
        "wires": []
    },
    {
        "id": "5a163d9094f9eceb",
        "type": "function",
        "z": "1471bcf322cb6423",
        "name": "Create plot information",
        "func": "// get FFT parameters\nvar FSAMPLE = flow.get(\"FSAMPLE\") || 7500; //3750;  // Samples per second\nvar FFT_SIZE = flow.get(\"FFT_SIZE\") || 1<<12;\n\nvar Ts = 1.0/FSAMPLE;\nvar df = 1.0 / (Ts * FFT_SIZE);\n\n// this is where you define the legend for the datasets\nvar title = \"Spettro delle ampiezze\";\nvar legend0 = \"Canale 0\";\nvar legend1 = \"Canale 1\";\n\n// variables to be used\nvar i;\nvar m;\n\n// retrieve datasets from node context\nvar data0 = context.get(\"dataset0\") || [];\nvar data1 = context.get(\"dataset1\") || [];\nvar equalizer = flow.get(\"EQUALIZER\") || [];\n\nvar eq_def = (equalizer.length > 0);\n\nif( msg.payload.hasOwnProperty(\"ch0\") ) {\n    data0 =[];\n    \n    for(i=0; i < msg.payload.ch0.length; i++) {\n       m = (eq_def) ? equalizer[i] : 1.0;\n       data0.push( {\"x\": i*df, \"y\": m * msg.payload.ch0[i] } );\n    }\n    \n    // store the new dataset into node context\n    context.set(\"dataset0\", data0);\n}\n\nif( msg.payload.hasOwnProperty(\"ch1\") ) {\n    data1 =[];\n    \n    for(i=0; i < msg.payload.ch1.length; i++) {\n      m = (eq_def) ? equalizer[i] : 1.0;\n      data1.push( {\"x\": i*df, \"y\": m * msg.payload.ch1[i] } );\n    }\n    \n    // store the new dataset into node context\n    context.set(\"dataset1\", data1);\n}\n\n// Now we build msg.payload\nmsg.payload = { \"title\"   : title,\n                \"legend0\" : legend0,\n                \"data0\"   : data0,\n                \"legend1\" : legend1,\n                \"data1\"   : data1,\n                \"df\"      : df\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 460,
        "wires": [
            [
                "c08ce136b3aa28b6",
                "90454b6f7d090b0c",
                "80474661f0055e01"
            ]
        ]
    },
    {
        "id": "1df3fca970c91e6e",
        "type": "inject",
        "z": "1471bcf322cb6423",
        "name": "Description",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": " ",
        "payloadType": "str",
        "x": 150,
        "y": 840,
        "wires": [
            [
                "8a2434fd86744fc6"
            ]
        ]
    },
    {
        "id": "df1d430e198bb19a",
        "type": "function",
        "z": "1471bcf322cb6423",
        "d": true,
        "name": "ToUInt32Array",
        "func": "// https://www.html5rocks.com/en/tutorials/webgl/typed_arrays/\n\n// convert the NodeJS binary buffer into a Javascript ArrayBuffer\nmyBuffer = msg.payload.buffer;\n// put a DataView over the ArrayBuffer to make it easy to access data value\nvar dv = new DataView(myBuffer);\n\n// how many elements will be converted \nlet bytes_per_element = Uint32Array.BYTES_PER_ELEMENT;\nlet byte_buffer_size = myBuffer.byteLength;\nlet number_of_element = byte_buffer_size/bytes_per_element;\n\n// create the typed array to store the converted values\nvar UIntArray = new Uint32Array(number_of_element);\n\n// just for debug...\n/*\nmsg.bytes_per_element = bytes_per_element;\nmsg.number_of_element = number_of_element;\nmsg.byte_length = byte_buffer_size;\n*/\n\n// iterate over the dataview and get the values\nfor (k=0, j=0; j<byte_buffer_size; k++, j=j+bytes_per_element) {\n  // all the values in the buffer are little-endian, set the optional littleEndian parameter to \"true\"\n  UIntArray[k] = dv.getUint32(j, true); \n}\n\n// this is the new payload\nmsg.payload = UIntArray;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 180,
        "wires": [
            [
                "734b297547800c70"
            ]
        ]
    },
    {
        "id": "067bdccadc670aed",
        "type": "mqtt out",
        "z": "1471bcf322cb6423",
        "name": "",
        "topic": "ESP32DevKit123/trigger",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "35a4e7d1.620608",
        "x": 530,
        "y": 920,
        "wires": []
    },
    {
        "id": "c08ce136b3aa28b6",
        "type": "file",
        "z": "1471bcf322cb6423",
        "d": true,
        "name": "",
        "filename": "C:\\Users\\luca\\Documents\\PlatformIO\\Projects\\ESP32_Devkit_ADS1256_FFT_AsyncMQTT_binary_01\\dati_chart.txt",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 790,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "7bb5ec7994eeb16f",
        "type": "mqtt in",
        "z": "1471bcf322cb6423",
        "name": "",
        "topic": "ESP32DevKit123/FFTBinTopic0",
        "qos": "0",
        "datatype": "buffer",
        "broker": "35a4e7d1.620608",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 520,
        "wires": [
            [
                "bd0fb9068f9a8c9e"
            ]
        ]
    },
    {
        "id": "bd0fb9068f9a8c9e",
        "type": "join",
        "z": "1471bcf322cb6423",
        "name": "",
        "mode": "custom",
        "build": "buffer",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 370,
        "y": 520,
        "wires": [
            [
                "1d7c5560ffd71ad9",
                "0214887e1b16ab8e"
            ]
        ]
    },
    {
        "id": "62d4f37bcb1cb991",
        "type": "comment",
        "z": "1471bcf322cb6423",
        "name": "number of blocks",
        "info": "Impostare manualmente la proprietà:\nAfter a number of message parts...\n\ndividendo la dimensione del messaggio per 4096",
        "x": 360,
        "y": 560,
        "wires": []
    },
    {
        "id": "1d7c5560ffd71ad9",
        "type": "function",
        "z": "1471bcf322cb6423",
        "name": "ToFloatArray0",
        "func": "// https://www.html5rocks.com/en/tutorials/webgl/typed_arrays/\n// https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer/31394257#31394257\n\n// convert the NodeJS binary buffer into a Javascript ArrayBuffer\nlet b = msg.payload;\nlet myBuffer = b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength);\n\n//// convert the NodeJS binary buffer into a Javascript ArrayBuffer\n//myBuffer = msg.payload.buffer;\n\n// put a DataView over the ArrayBuffer to make it easy to access data value\nvar dv = new DataView(myBuffer);\n\n// how many elements will be converted \nlet bytes_per_element = Float32Array.BYTES_PER_ELEMENT;\nlet byte_buffer_size = myBuffer.byteLength;\nlet number_of_element = byte_buffer_size / bytes_per_element;\nlet half_number_of_element = number_of_element / 2;\n\n// create the typed array to store the converted values\nvar floatArray = new Float32Array(number_of_element);\n\n// just for debug...\n/*\nmsg.bytes_per_element = bytes_per_element;\nmsg.number_of_element = number_of_element;\nmsg.byte_length = byte_buffer_size;\n*/\n\n// iterate over the dataview and get the values\nvar j, k;\nfor (k = 0, j = 0; j < byte_buffer_size; k++, j = j + bytes_per_element) {\n  // all the values in the buffer are little-endian, set the optional littleEndian parameter to \"true\"\n  floatArray[k] = dv.getFloat32(j, true);\n}\n\n// we need to swap array halves? check if first element of the second half is lesser than 0\nif (floatArray[half_number_of_element] < 0.0) {\n  // rotate array elements by half of array size\n  // see https://stackoverflow.com/questions/1985260/rotate-the-elements-in-an-array-in-javascript/33451102#33451102\n  //floatArray.push.apply(floatArray, floatArray.splice(0, half_number_of_element));\n\n  const b2 = floatArray.slice(half_number_of_element, number_of_element);\n  b2.push.apply(b2, floatArray.slice(0, half_number_of_element));\n  // remove sign from array's first element\n  b2[0] = Math.abs(floatArray[0]);\n  // this is the new payload\n  msg.payload.ch0 = b2;\n} else {\n  // remove sign from array's first element\n  floatArray[0] = Math.abs(floatArray[0]);\n  // this is the new payload\n  msg.payload.ch0 = floatArray;\n}\n\n//floatArray = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 520,
        "wires": [
            [
                "5a163d9094f9eceb"
            ]
        ]
    },
    {
        "id": "781ddc55c0641c15",
        "type": "status",
        "z": "1471bcf322cb6423",
        "name": "",
        "scope": [
            "366aa1f575825ad4"
        ],
        "x": 80,
        "y": 60,
        "wires": [
            [
                "370ee535d7084c33",
                "c138a4b8c8b20872"
            ]
        ]
    },
    {
        "id": "b4efcf60619655b4",
        "type": "function",
        "z": "1471bcf322cb6423",
        "name": "Get_mqtt_status",
        "func": "var status = flow.get(\"mqtt_status\") || {};\n\nif (status.text==\"node-red:common.status.connected\")\n{\n  msg.payload = \"Connected\";\n}\nelse if (status.text==\"node-red:common.status.connecting\")\n{\n  msg.payload = \"Connecting...\";\n}\nelse if (status.text==\"node-red:common.status.disconnected\") {\n  msg.payload = \"Disconnected\";    \n}\nelse {\n    msg.payload = \"a\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 60,
        "wires": [
            [
                "e8826d846daf3644",
                "29f5d7e65cbe941a"
            ]
        ]
    },
    {
        "id": "370ee535d7084c33",
        "type": "function",
        "z": "1471bcf322cb6423",
        "name": "Store_mqtt_status",
        "func": "var mqtt_status=msg.status;\nflow.set(\"mqtt_status\",mqtt_status);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "e8826d846daf3644",
        "type": "debug",
        "z": "1471bcf322cb6423",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 100,
        "wires": []
    },
    {
        "id": "364cee0c1af6dea4",
        "type": "inject",
        "z": "1471bcf322cb6423",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 510,
        "y": 60,
        "wires": [
            [
                "b4efcf60619655b4"
            ]
        ]
    },
    {
        "id": "1531ed231167c33b",
        "type": "mqtt in",
        "z": "1471bcf322cb6423",
        "name": "",
        "topic": "ESP32DevKit123/RTD1BinTopic",
        "qos": "0",
        "datatype": "utf8",
        "broker": "35a4e7d1.620608",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 170,
        "y": 1240,
        "wires": [
            [
                "4ef6d7277596c6d3"
            ]
        ]
    },
    {
        "id": "fcd47c7a19f4b963",
        "type": "function",
        "z": "1471bcf322cb6423",
        "name": "RTD_float",
        "func": "// https://www.html5rocks.com/en/tutorials/webgl/typed_arrays/\n\n//var fbuffer = new ArrayBuffer(4);\n//new DataView(fbuffer).setFloat32(0, 1.0, true /* littleEndian */);\n\n//fbuffer = msg.payload.buffer;\n//const view = new DataView(fbuffer);\n/*\nvar ab = new ArrayBuffer(msg.payload.length);\n//const view = new Float32Array(ab);\n\n    for (let i = 0; i < msg.payload.length; i++) {\n        ab[i] = msg.payload[i];\n    }\n\nvar dv = new DataView(ab);\n//msg.payload.rtd1 = new Float32Array(msg.payload)[0];\nmsg.payload.rtd1 = dv.getFloat32(0, true);\n//msg.payload.rtd1 = msg.payload.byteLength;\n*/\n\nlet b = msg.payload;\nlet f32 = new Float32Array(b.buffer, 0, b.byteLength / Float32Array.BYTES_PER_ELEMENT);\nmsg.payload = f32[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 1120,
        "wires": [
            [
                "827a707b1da54b05"
            ]
        ]
    },
    {
        "id": "827a707b1da54b05",
        "type": "debug",
        "z": "1471bcf322cb6423",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1120,
        "wires": []
    },
    {
        "id": "60c3eadb5d863414",
        "type": "debug",
        "z": "1471bcf322cb6423",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 260,
        "wires": []
    },
    {
        "id": "17100423f092c45f",
        "type": "mqtt in",
        "z": "1471bcf322cb6423",
        "name": "",
        "topic": "ESP32DevKit123/RTD2BinTopic",
        "qos": "0",
        "datatype": "utf8",
        "broker": "35a4e7d1.620608",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 170,
        "y": 1360,
        "wires": [
            [
                "0a135c093f454bf6"
            ]
        ]
    },
    {
        "id": "c5d99cc1ddf06a2e",
        "type": "mqtt in",
        "z": "1471bcf322cb6423",
        "name": "",
        "topic": "ESP32DevKit123/CountAdcTopic",
        "qos": "0",
        "datatype": "utf8",
        "broker": "35a4e7d1.620608",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 170,
        "y": 1480,
        "wires": [
            [
                "b98609121ba95407"
            ]
        ]
    },
    {
        "id": "81edee3e34e23663",
        "type": "debug",
        "z": "1471bcf322cb6423",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 400,
        "wires": []
    },
    {
        "id": "5e48f079eb61868e",
        "type": "inject",
        "z": "1471bcf322cb6423",
        "name": "Create parameters",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 260,
        "wires": [
            [
                "24c44c82a9e6d2a8"
            ]
        ]
    },
    {
        "id": "24c44c82a9e6d2a8",
        "type": "function",
        "z": "1471bcf322cb6423",
        "name": "Set parameters",
        "func": "var FSAMPLE = 7500; //3750;  // Samples per second\nvar FFT_SIZE = 1<<12;        // FFT size (must be a power of two)\nvar MCP_SAMPLE_PERIOD = 10e-3;\n\nflow.set(\"FSAMPLE\", FSAMPLE);\nflow.set(\"FFT_SIZE\", FFT_SIZE);\nflow.set(\"MCP_SAMPLE_PERIOD\", MCP_SAMPLE_PERIOD);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 260,
        "wires": [
            [
                "b3a46a955dc4780a"
            ]
        ]
    },
    {
        "id": "b3a46a955dc4780a",
        "type": "function",
        "z": "1471bcf322cb6423",
        "name": "ADC sinc equalizer",
        "func": "// precompute the overall frequency response for the ADS1255/6\n// see: ADS1256.pdf, page 18 equation 2\nvar FSAMPLE = flow.get(\"FSAMPLE\") || 7500;\nvar FFT_SIZE = flow.get(\"FFT_SIZE\")|| 2<<11;\nvar len = FFT_SIZE / 2;\nvar Num_Ave = 4;\nvar Ts = 1.0/FSAMPLE;        // sample period\nvar df = 1.0 / (Ts * FFT_SIZE);  // FFT frequency resolution\nvar F_CLKIN = 7.68e6;\nvar I_F_CLKIN = 1 / F_CLKIN;\nvar pi = Math.PI;\nvar i;\nvar R_lp = 1e2;\nvar C_lp = 180e-9;\nvar tau_lp = R_lp * C_lp;\nvar f_lp = (1/tau_lp)/(2*pi);\n\n// create the typed array to store the converted values\nvar equalizer = new Float32Array(len);\n\nfor(i=0; i<len; i++) {\n    var f = i * df;\n    var f_n = f * I_F_CLKIN;\n    var n1 = Math.sin(256*pi*f_n);\n    var d1 = 64 * Math.sin(4 * pi * f_n);\n    var n2 = Math.sin( 256 * pi * Num_Ave * f_n);\n    var d2 = Num_Ave * Math.sin( 256 * pi * f_n);\n    \n    var H_sinc = Math.abs( n1 / d1  )**5;\n    var H_averager = Math.abs(n2/d2);\n    var p = H_sinc * H_averager / Math.sqrt(1 + (f/f_lp)**2 );\n    // se p == 0, assegna 1 di default\n    p = 1.0;\n    equalizer[i] = (p > 0)  ? 1.0 / p : 1.0;\n}\n\nflow.set(\"EQUALIZER\", equalizer);\nmsg.df = df;\nmsg.payload=equalizer;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 530,
        "y": 260,
        "wires": [
            [
                "60c3eadb5d863414"
            ]
        ]
    },
    {
        "id": "c926cdbea08aa930",
        "type": "mqtt in",
        "z": "1471bcf322cb6423",
        "name": "",
        "topic": "ESP32DevKit123/RTD1FaultTopic",
        "qos": "0",
        "datatype": "utf8",
        "broker": "35a4e7d1.620608",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 180,
        "y": 1300,
        "wires": [
            [
                "c05911f82c9f9dd1"
            ]
        ]
    },
    {
        "id": "c05911f82c9f9dd1",
        "type": "ui_text",
        "z": "1471bcf322cb6423",
        "group": "5f88817443cb3d4b",
        "order": 22,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "RTD1 status:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 710,
        "y": 1300,
        "wires": []
    },
    {
        "id": "0c2d57071974930f",
        "type": "mqtt in",
        "z": "1471bcf322cb6423",
        "name": "",
        "topic": "ESP32DevKit123/RTD2FaultTopic",
        "qos": "0",
        "datatype": "utf8",
        "broker": "35a4e7d1.620608",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 180,
        "y": 1420,
        "wires": [
            [
                "f2eb6305e7e164b0"
            ]
        ]
    },
    {
        "id": "f2eb6305e7e164b0",
        "type": "ui_text",
        "z": "1471bcf322cb6423",
        "group": "5f88817443cb3d4b",
        "order": 23,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "RTD2 status:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 710,
        "y": 1420,
        "wires": []
    },
    {
        "id": "0a135c093f454bf6",
        "type": "ui_gauge",
        "z": "1471bcf322cb6423",
        "name": "rtd2",
        "group": "5f88817443cb3d4b",
        "order": 4,
        "width": 2,
        "height": 2,
        "gtype": "gage",
        "title": "RTD2",
        "label": "°C",
        "format": "{{value | number:2}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 470,
        "y": 1360,
        "wires": []
    },
    {
        "id": "4ef6d7277596c6d3",
        "type": "ui_gauge",
        "z": "1471bcf322cb6423",
        "name": "rtd1",
        "group": "5f88817443cb3d4b",
        "order": 1,
        "width": 2,
        "height": 2,
        "gtype": "gage",
        "title": "RTD1",
        "label": "°C",
        "format": "{{value | number:2}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 470,
        "y": 1240,
        "wires": []
    },
    {
        "id": "90454b6f7d090b0c",
        "type": "ui_template",
        "z": "1471bcf322cb6423",
        "group": "5f88817443cb3d4b",
        "name": "Spettro ADS1256",
        "order": 2,
        "width": 14,
        "height": 8,
        "format": "<canvas id=\"scatterChart\" width=\"750\" height=\"400\" style=\"border:1px solid #000000;margin: 2px;\"></canvas>\n\n<script>\n(function() {\n    var chartID = \"scatterChart\";           // set this to the id you have specified in the canvas tag above\n\n    // setup the chart definition as defined in the chart.js documentation, \n    // in addition setting up the topic for each channel\n    var chartDef = {\n        type: 'scatter',\n        data: {\n          datasets: [\n            {\n              label: \"\",\n              fill: false,\n              pointStyle: 'dot',  // pointStyle: 'rectRot'\n              pointRadius: 1,\n              lineTension: 0,\n              pointBackgroundColor: 'rgba(220, 0, 0, 0.6)',\n              borderColor: 'rgba(220, 0, 0, 0.6)',\n              data: []  // data is written here later\n            },\n            {\n              label: \"\",\n              fill: false,\n              pointStyle: 'dot',\n              pointRadius: 2,\n              lineTension: 0,\n              pointBackgroundColor: 'rgba(0, 220, 0, 0.8)', // \"rgb(0, 220, 0)\",\n              borderColor: 'rgba(0, 220, 0, 0.8)',\n              data: []  // data is written here later\n            }        \n          ]\n        }, \n        options: {\n            animation: false,\n            fill: false,\n            tooltips: {\n                callbacks: {\n                    label: function (tooltipItem, data) {\n                        return Number(tooltipItem.xLabel).toFixed(2) +\"Hz, \" + Number(tooltipItem.yLabel).toFixed(3) + \"V\";\n                    }\n                }\n            },\n            legend: {\n                display: true,\n                labels: {\n                    fontColor: '#444'\n                }\n            },\n            layout: {\n                    padding: 10\n            },    \n            title: {\n                text: 'Accelerazioni',\n                display: true,\n                fontColor: '#444'\n            }, \n            scales: {\n                xAxes: [{ \n                  scaleLabel: {\n                    display: true,\n                    fontColor: '#444',\n                    labelString: \"Frequenza [Hz]\"\n                  },\n                  ticks: {min: 0, max:4000, tickStep: 250}\n                }],            \n                yAxes: [{ \n                  scaleLabel: {\n                    display: true,\n                    fontColor: '#444',\n                    labelString: \"Ampiezza [V]\"\n                  },\n                  ticks: {min: 0, max:0.5}\n                }]\n            }\n        }\n    };\n    \n    var myChart = null;\n    \n    function doChart(msg, scope) {\n        //var title = msg.payload.title;\n        var title = msg.payload.legend1;\n        \n        console.log(\"data 0:\");\n        console.log(msg.payload.data0);\n        if( msg.payload.data1.length > 0  ) {\n        console.log(\"data 1:\");\n        console.log(msg.payload.data1);\n        }\n        \n        if (!myChart) {\n            // chart does not exist so load the data and create it\n            var ctx = document.getElementById(chartID);\n            myChart = new Chart(ctx, chartDef); \n            \n            myChart.options.title.text = msg.payload.title;\n            \n            myChart.data.datasets[0].label = msg.payload.legend0;\n            myChart.data.datasets[1].label = msg.payload.legend1;\n        }\n\n\n        if( msg.payload.data0.length > 0  ) {\n            for(k=0; k<msg.payload.data0.length; k++) {\n              myChart.data.datasets[0].data.pop();\n            }\n           // myChart.update();\n            for(k=0; k<msg.payload.data0.length; k++) {\n              myChart.data.datasets[0].data.push( msg.payload.data0[k] );\n            }\n            myChart.update();\n        }        \n        \n        //myChart.data.datasets[1].data.push( dati1 );\n        if( msg.payload.data1.length > 0  ) {\n            for(k=0; k<msg.payload.data1.length; k++) {\n              myChart.data.datasets[1].data.pop();\n            }\n           // myChart.update();\n            for(k=0; k<msg.payload.data1.length; k++) {\n              myChart.data.datasets[1].data.push( msg.payload.data1[k] );\n            }\n            myChart.update();\n        }\n        \n        \n        // and update chart\n       // myChart.update();\n        \n    }\n    \n    (function(scope) {\n        // this code gets run when the a view is opened on the node in the browser\n        scope.$watch('msg', function(msg) {\n            if (msg) {\n                doChart(msg, scope);\n            }\n        });\n    })(scope);    \n    \n})();\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1070,
        "y": 460,
        "wires": [
            []
        ],
        "info": "decimals in tooltips:\nhttps://social.msdn.microsoft.com/Forums/en-US/64911138-1dad-4534-ad07-e789f4550d56/chartjs-plot-decimal-points"
    },
    {
        "id": "8f0b51bd7a9a841f",
        "type": "ui_button",
        "z": "1471bcf322cb6423",
        "name": "",
        "group": "5f88817443cb3d4b",
        "order": 14,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Single shot",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 920,
        "wires": [
            [
                "067bdccadc670aed"
            ]
        ]
    },
    {
        "id": "551f3f436a9a1d06",
        "type": "ui_button",
        "z": "1471bcf322cb6423",
        "name": "",
        "group": "5f88817443cb3d4b",
        "order": 16,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Free Run",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "2",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 960,
        "wires": [
            [
                "067bdccadc670aed"
            ]
        ]
    },
    {
        "id": "57597ba4b7773436",
        "type": "ui_button",
        "z": "1471bcf322cb6423",
        "name": "",
        "group": "5f88817443cb3d4b",
        "order": 18,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Stop",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 1000,
        "wires": [
            [
                "067bdccadc670aed"
            ]
        ]
    },
    {
        "id": "8a2434fd86744fc6",
        "type": "ui_text",
        "z": "1471bcf322cb6423",
        "group": "5f88817443cb3d4b",
        "order": 25,
        "width": 24,
        "height": 1,
        "name": "demo 1 description",
        "label": "ISIS Bassa Friulana - Dipartimento di Elettronica e Telecomunicazioni",
        "format": "",
        "layout": "row-center",
        "className": "",
        "x": 510,
        "y": 840,
        "wires": []
    },
    {
        "id": "29f5d7e65cbe941a",
        "type": "ui_text",
        "z": "1471bcf322cb6423",
        "group": "5f88817443cb3d4b",
        "order": 21,
        "width": 8,
        "height": 1,
        "name": "MQTT status",
        "label": "MQTT status:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 910,
        "y": 60,
        "wires": []
    },
    {
        "id": "0d856c2d31631a1f",
        "type": "mqtt in",
        "z": "1471bcf322cb6423",
        "name": "",
        "topic": "ESP32DevKit123/TorqueSpeedTopic",
        "qos": "0",
        "datatype": "buffer",
        "broker": "35a4e7d1.620608",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 180,
        "y": 1580,
        "wires": [
            [
                "b1492415ffcca6f7"
            ]
        ]
    },
    {
        "id": "b1492415ffcca6f7",
        "type": "function",
        "z": "1471bcf322cb6423",
        "name": "ToMCPPoints",
        "func": "// get MCP3204 parameters\nvar Ts = flow.get(\"MCP_SAMPLE_PERIOD\") || 10e-3;\n\n// this is where you define the legend for the datasets\nvar title1 = \"Coppie meccaniche\";\nvar title2 = \"Velocità\";\nvar legend0 = \"Coppia 1\";\nvar legend1 = \"Coppia 2\";\nvar legend2 = \"Velocità 1\";\nvar legend3 = \"Velocità 2\";\n\n// variables to be used\nvar i;\nvar data0 = [];\nvar data1 = [];\nvar data2 = [];\nvar data3 = [];\n\n// https://www.html5rocks.com/en/tutorials/webgl/typed_arrays/\n// https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer/31394257#31394257\n\n// convert the NodeJS binary buffer into a Javascript ArrayBuffer\nlet b = msg.payload;\nlet mcpBuffer = b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength);\n\n// put a DataView over the ArrayBuffer to make it easy to access data value\nvar dv = new DataView(mcpBuffer);\n\n// how many elements will be converted \nlet bytes_per_element1 = Float32Array.BYTES_PER_ELEMENT;\nvar byte_buffer_size1 =  mcpBuffer.byteLength;\nvar number_of_element1 = byte_buffer_size1/bytes_per_element1;\n\n// samples per channel\nvar samples_per_channel = number_of_element1/4;\n\n// create the typed array to store the converted values\nvar floatArray1 = new Float32Array(number_of_element1);\n\n// just for debug...\n/*\nmsg.bytes_per_element1 = bytes_per_element1;\nmsg.number_of_element1 = number_of_element1;\nmsg.byte_buffer_size1 = mcpBuffer.byteLength;\n*/\n// iterate over the dataview and get the values\nfor (k=0, j=0; j<byte_buffer_size1; k++, j=j+bytes_per_element1) {\n  // all the values in the buffer are little-endian, set the optional littleEndian parameter to \"true\"\n  floatArray1[k] = dv.getFloat32(j, true); \n}\n\n// split the floatArray into four datasets\ndata0 = floatArray1.slice(0, samples_per_channel);\ndata1 = floatArray1.slice(samples_per_channel, 2*samples_per_channel);\ndata2 = floatArray1.slice(2*samples_per_channel, 3*samples_per_channel);\ndata3 = floatArray1.slice(3*samples_per_channel, 4*samples_per_channel);\n\n//console.log(data0);\n//console.log(data1);\n\nvar points0 = [];\nvar points1 = [];\nvar points2 = [];\nvar points3 = [];\n\nfor(i=0; i < samples_per_channel; i++) {\n   points0.push( {\"x\": i*Ts, \"y\": data0[i] } );\n}\n\nfor(i=0; i < samples_per_channel; i++) {\n   points1.push( {\"x\": i*Ts, \"y\": data1[i] } );\n} \n\nfor(i=0; i < samples_per_channel; i++) {\n   points2.push( {\"x\": i*Ts, \"y\": data2[i] } );\n}\n\nfor(i=0; i < samples_per_channel; i++) {\n   points3.push( {\"x\": i*Ts, \"y\": data3[i] } );\n}\n\n//console.log(points0);\n//console.log(points1);\n\n// Now we build msg1.payload\nvar msg1 = { payload: {} };\nmsg1.payload = { \"title\"   : title1,\n                \"legend0\" : legend0,\n                \"data0\"   : points0,\n                \"legend1\" : legend1,\n                \"data1\"   : points1,\n                \"Ts\"      : Ts\n};\n\n// Now we build msg2.payload\nvar msg2 = { payload: {} };\nmsg2.payload = { \"title\"   : title2,\n                \"legend0\" : legend2,\n                \"data0\"   : points2,\n                \"legend1\" : legend3,\n                \"data1\"   : points3,\n                \"Ts\"      : Ts\n};\n\nreturn [msg1, msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1580,
        "wires": [
            [
                "23f1d00e6580bfa5"
            ],
            [
                "7c4fd6f05725eb35"
            ]
        ],
        "info": "https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer\n...\nThe slice and offset stuff is required because small Buffers (less than 4 kB by default, half the [pool size](https://nodejs.org/dist/latest-v12.x/docs/api/buffer.html#buffer_class_property_buffer_poolsize)) can be views on a shared ArrayBuffer. Without slicing, you can end up with an ArrayBuffer containing data from another Buffer. See explanation [in the docs](https://nodejs.org/dist/latest-v12.x/docs/api/buffer.html#buffer_buf_byteoffset)."
    },
    {
        "id": "80474661f0055e01",
        "type": "debug",
        "z": "1471bcf322cb6423",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 580,
        "wires": []
    },
    {
        "id": "23f1d00e6580bfa5",
        "type": "ui_template",
        "z": "1471bcf322cb6423",
        "group": "5f88817443cb3d4b",
        "name": "Coppie",
        "order": 3,
        "width": 8,
        "height": 5,
        "format": "<canvas id=\"TorqueChart\" width=\"300\" height=\"170\" style=\"border:1px solid #000000;margin: 2px;\"></canvas>\n\n<script>\n(function() {\n    var chartID = \"TorqueChart\";           // set this to the id you have specified in the canvas tag above\n\n    // setup the chart definition as defined in the chart.js documentation, \n    // in addition setting up the topic for each channel\n    var chartDef = {\n        type: 'scatter',\n        data: {\n          datasets: [\n            {\n              label: \"\",\n              fill: false,\n              pointStyle: 'rectRot',\n              pointRadius: 2,\n              lineTension: 0,\n              pointBackgroundColor: \"rgb(220, 0, 0)\",\n              borderColor: 'rgb(255, 0, 0)',\n              data: []  // data is written here later\n            },\n            {\n              label: \"\",\n              fill: false,\n              pointStyle: 'circle',\n              pointRadius: 2,\n              lineTension: 0,\n              pointBackgroundColor: \"rgb(0, 153, 255)\",\n              borderColor: 'rgb(0, 153, 255)',\n              data: []  // data is written here later\n            }        \n          ]\n        }, \n        options: {\n            animation: false,\n            fill: false,\n            tooltips: {\n                callbacks: {\n                    label: function (tooltipItem, data) {\n                        return Number(tooltipItem.xLabel).toFixed(2) +\"s, \" + Number(tooltipItem.yLabel).toFixed(3) + \"V\";\n                    }\n                }\n            },\n            legend: {\n                display: true,\n                labels: {\n                    fontColor: '#444'\n                }\n            },\n            layout: {\n                    padding: 10\n            },    \n            title: {\n                text: 'Coppia',\n                display: true,\n                fontColor: '#444'\n            }, \n            scales: {\n                xAxes: [{ \n                  scaleLabel: {\n                    display: true,\n                    fontColor: '#444',\n                    labelString: \"t [s]\"\n                  },\n                  ticks: {min: 0, max:0.5, tickStep: 0.1}\n                }],            \n                yAxes: [{ \n                  scaleLabel: {\n                    display: true,\n                    fontColor: '#444',\n                    labelString: \"Ampiezza [V]\"\n                  },\n                  ticks: {min: 0, max:3}\n                }]\n            }\n        }\n    };\n    \n    var myChart = null;\n    \n    function doChart(msg, scope) {\n        //var title = msg.payload.title;\n        var title = msg.payload.legend1;\n        \n        console.log(\"data 0:\");\n        console.log(msg.payload.data0);\n        if( msg.payload.data1.length > 0  ) {\n        console.log(\"data 1:\");\n        console.log(msg.payload.data1);\n        }\n        \n        if (!myChart) {\n            // chart does not exist so load the data and create it\n            var ctx = document.getElementById(chartID);\n            myChart = new Chart(ctx, chartDef); \n            \n            myChart.options.title.text = msg.payload.title;\n            \n            myChart.data.datasets[0].label = msg.payload.legend0;\n            myChart.data.datasets[1].label = msg.payload.legend1;\n        }\n\n\n        if( msg.payload.data0.length > 0  ) {\n            for(k=0; k<msg.payload.data0.length; k++) {\n              myChart.data.datasets[0].data.pop();\n            }\n           // myChart.update();\n            for(k=0; k<msg.payload.data0.length; k++) {\n              myChart.data.datasets[0].data.push( msg.payload.data0[k] );\n            }\n            myChart.update();\n        }        \n        \n        //myChart.data.datasets[1].data.push( dati1 );\n        if( msg.payload.data1.length > 0  ) {\n            for(k=0; k<msg.payload.data1.length; k++) {\n              myChart.data.datasets[1].data.pop();\n            }\n           // myChart.update();\n            for(k=0; k<msg.payload.data1.length; k++) {\n              myChart.data.datasets[1].data.push( msg.payload.data1[k] );\n            }\n            myChart.update();\n        }\n        \n        \n        // and update chart\n       // myChart.update();\n        \n    }\n    \n    (function(scope) {\n        // this code gets run when the a view is opened on the node in the browser\n        scope.$watch('msg', function(msg) {\n            if (msg) {\n                doChart(msg, scope);\n            }\n        });\n    })(scope);    \n    \n})();\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 720,
        "y": 1540,
        "wires": [
            []
        ],
        "info": "decimals in tooltips:\nhttps://social.msdn.microsoft.com/Forums/en-US/64911138-1dad-4534-ad07-e789f4550d56/chartjs-plot-decimal-points"
    },
    {
        "id": "7c4fd6f05725eb35",
        "type": "ui_template",
        "z": "1471bcf322cb6423",
        "group": "5f88817443cb3d4b",
        "name": "Velocità",
        "order": 7,
        "width": 8,
        "height": 5,
        "format": "<canvas id=\"SpeedChart\" width=\"300\" height=\"170\" style=\"border:1px solid #000000;margin: 2px;\"></canvas>\n\n<script>\n(function() {\n    var chartID = \"SpeedChart\";           // set this to the id you have specified in the canvas tag above\n\n    // setup the chart definition as defined in the chart.js documentation, \n    // in addition setting up the topic for each channel\n    var chartDef = {\n        type: 'scatter',\n        data: {\n          datasets: [\n            {\n              label: \"\",\n              fill: false,\n              pointStyle: 'rectRot',\n              pointRadius: 2,\n              lineTension: 0,\n              pointBackgroundColor: \"rgb(220, 0, 0)\",\n              borderColor: 'rgb(255, 0, 0)',\n              data: []  // data is written here later\n            },\n            {\n              label: \"\",\n              fill: false,\n              pointStyle: 'circle',\n              pointRadius: 2,\n              lineTension: 0,\n              pointBackgroundColor: \"rgb(0, 153, 255)\",\n              borderColor: 'rgb(0, 153, 255)',\n              data: []  // data is written here later\n            }        \n          ]\n        }, \n        options: {\n            animation: false,\n            fill: false,\n            tooltips: {\n                callbacks: {\n                    label: function (tooltipItem, data) {\n                        return Number(tooltipItem.xLabel).toFixed(2) +\"s, \" + Number(tooltipItem.yLabel).toFixed(3) + \"V\";\n                    }\n                }\n            },\n            legend: {\n                display: true,\n                labels: {\n                    fontColor: '#444'\n                }\n            },\n            layout: {\n                    padding: 10\n            },    \n            title: {\n                text: 'Velocità',\n                display: true,\n                fontColor: '#444'\n            }, \n            scales: {\n                xAxes: [{ \n                  scaleLabel: {\n                    display: true,\n                    fontColor: '#444',\n                    labelString: \"t [s]\"\n                  },\n                  ticks: {min: 0, max:0.5, tickStep: 0.1}\n                }],            \n                yAxes: [{ \n                  scaleLabel: {\n                    display: true,\n                    fontColor: '#444',\n                    labelString: \"Ampiezza [V]\"\n                  },\n                  ticks: {min: 0, max:3}\n                }]\n            }\n        }\n    };\n    \n    var myChart = null;\n    \n    function doChart(msg, scope) {\n        //var title = msg.payload.title;\n        var title = msg.payload.legend1;\n        \n        console.log(\"data 0:\");\n        console.log(msg.payload.data0);\n        if( msg.payload.data1.length > 0  ) {\n        console.log(\"data 1:\");\n        console.log(msg.payload.data1);\n        }\n        \n        if (!myChart) {\n            // chart does not exist so load the data and create it\n            var ctx = document.getElementById(chartID);\n            myChart = new Chart(ctx, chartDef); \n            \n            myChart.options.title.text = msg.payload.title;\n            \n            myChart.data.datasets[0].label = msg.payload.legend0;\n            myChart.data.datasets[1].label = msg.payload.legend1;\n        }\n\n\n        if( msg.payload.data0.length > 0  ) {\n            for(k=0; k<msg.payload.data0.length; k++) {\n              myChart.data.datasets[0].data.pop();\n            }\n           // myChart.update();\n            for(k=0; k<msg.payload.data0.length; k++) {\n              myChart.data.datasets[0].data.push( msg.payload.data0[k] );\n            }\n            myChart.update();\n        }        \n        \n        //myChart.data.datasets[1].data.push( dati1 );\n        if( msg.payload.data1.length > 0  ) {\n            for(k=0; k<msg.payload.data1.length; k++) {\n              myChart.data.datasets[1].data.pop();\n            }\n           // myChart.update();\n            for(k=0; k<msg.payload.data1.length; k++) {\n              myChart.data.datasets[1].data.push( msg.payload.data1[k] );\n            }\n            myChart.update();\n        }\n        \n        \n        // and update chart\n       // myChart.update();\n        \n    }\n    \n    (function(scope) {\n        // this code gets run when the a view is opened on the node in the browser\n        scope.$watch('msg', function(msg) {\n            if (msg) {\n                doChart(msg, scope);\n            }\n        });\n    })(scope);    \n    \n})();\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 720,
        "y": 1600,
        "wires": [
            []
        ],
        "info": "decimals in tooltips:\nhttps://social.msdn.microsoft.com/Forums/en-US/64911138-1dad-4534-ad07-e789f4550d56/chartjs-plot-decimal-points"
    },
    {
        "id": "b98609121ba95407",
        "type": "debug",
        "z": "1471bcf322cb6423",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 1480,
        "wires": []
    },
    {
        "id": "d250054b5d0d87c6",
        "type": "debug",
        "z": "1471bcf322cb6423",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 340,
        "wires": []
    },
    {
        "id": "5f277d3547a97f14",
        "type": "ui_dropdown",
        "z": "1471bcf322cb6423",
        "name": "",
        "label": "Guadagno PGA",
        "tooltip": "",
        "place": "Select option",
        "group": "5f88817443cb3d4b",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "x1",
                "value": "0",
                "type": "str"
            },
            {
                "label": "x2",
                "value": "1",
                "type": "str"
            },
            {
                "label": "x4",
                "value": "2",
                "type": "str"
            },
            {
                "label": "x5",
                "value": "3",
                "type": "str"
            },
            {
                "label": "x8",
                "value": "4",
                "type": "str"
            },
            {
                "label": "x10",
                "value": "5",
                "type": "str"
            },
            {
                "label": "x16",
                "value": "6",
                "type": "str"
            },
            {
                "label": "x32",
                "value": "7",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "x": 420,
        "y": 1720,
        "wires": [
            [
                "7a8daf8d39b0f590"
            ]
        ]
    },
    {
        "id": "33f1d47d94108a8f",
        "type": "inject",
        "z": "1471bcf322cb6423",
        "name": "preset PGA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 140,
        "y": 1720,
        "wires": [
            [
                "5f277d3547a97f14"
            ]
        ]
    },
    {
        "id": "0f7909797d72a62f",
        "type": "debug",
        "z": "1471bcf322cb6423",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1720,
        "wires": []
    },
    {
        "id": "2d7c46af8b409f68",
        "type": "mqtt out",
        "z": "1471bcf322cb6423",
        "name": "PGA set gain",
        "topic": "ESP32DevKit123/pgaSetGain",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "35a4e7d1.620608",
        "x": 830,
        "y": 1780,
        "wires": []
    },
    {
        "id": "57f5080ca15c97a7",
        "type": "mqtt in",
        "z": "1471bcf322cb6423",
        "name": "",
        "topic": "ESP32DevKit123/pgaGetGain",
        "qos": "0",
        "datatype": "utf8",
        "broker": "35a4e7d1.620608",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 160,
        "y": 1820,
        "wires": [
            [
                "5f277d3547a97f14"
            ]
        ]
    },
    {
        "id": "7a8daf8d39b0f590",
        "type": "function",
        "z": "1471bcf322cb6423",
        "name": "",
        "func": "msg.topic = \"ESP32DevKit123/pgaSetGain\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1720,
        "wires": [
            [
                "0f7909797d72a62f",
                "2d7c46af8b409f68"
            ]
        ]
    },
    {
        "id": "0214887e1b16ab8e",
        "type": "debug",
        "z": "1471bcf322cb6423",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 600,
        "wires": []
    },
    {
        "id": "f03345dc42025e26",
        "type": "mqtt out",
        "z": "4dc852e22b7643b0",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "35a4e7d1.620608",
        "x": 650,
        "y": 140,
        "wires": []
    },
    {
        "id": "bae983f739ff6570",
        "type": "ui_switch",
        "z": "4dc852e22b7643b0",
        "name": "",
        "label": "Led rosso",
        "tooltip": "Led rosso",
        "group": "63897fa5.43c4",
        "order": 5,
        "width": 4,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "ESP32_base/redTopic",
        "topicType": "str",
        "style": "",
        "onvalue": "1",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 420,
        "y": 140,
        "wires": [
            [
                "f03345dc42025e26",
                "fa9ea45e71c3967a"
            ]
        ]
    },
    {
        "id": "aaeb6b21898b16c6",
        "type": "mqtt in",
        "z": "4dc852e22b7643b0",
        "name": "",
        "topic": "ESP32_base/output",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "35a4e7d1.620608",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 260,
        "wires": [
            [
                "4470b41a7ec0bddc"
            ]
        ]
    },
    {
        "id": "4470b41a7ec0bddc",
        "type": "ui_text",
        "z": "4dc852e22b7643b0",
        "group": "63897fa5.43c4",
        "order": 7,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Pulsante:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 560,
        "y": 260,
        "wires": []
    },
    {
        "id": "fa9ea45e71c3967a",
        "type": "ui_led",
        "z": "4dc852e22b7643b0",
        "order": 9,
        "group": "63897fa5.43c4",
        "width": 0,
        "height": 0,
        "label": "Stato del led:",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#808080",
                "value": "0",
                "valueType": "str"
            },
            {
                "color": "#ff0000",
                "value": "1",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 710,
        "y": 200,
        "wires": []
    },
    {
        "id": "b73e53d7b69ed1f8",
        "type": "inject",
        "z": "4dc852e22b7643b0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "bae983f739ff6570"
            ]
        ]
    }
]